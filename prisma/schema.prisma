// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Url {
  id          String        @id @default(uuid())
  originalUrl String
  shortUrl    String
  urlCode     String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  UrlAnalytic UrlAnalytic[]
}

model UrlAnalytic {
  id      String @id @default(uuid())
  url     Url    @relation(fields: [url_id], references: [id])
  url_id  String @unique
  clicked Int
}

// model User {
//   id          String        @id @default(uuid())
//   email       String        @unique
//   userUrls    Url[]         @relation("UserUrls")
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
// }

// model Url {
//   id          String        @id @default(uuid())
//   originalUrl String
//   shortUrl    String
//   urlCode     String        @unique
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
//   UrlAnalytic UrlAnalytic[]
//   user        User?         @relation("UserUrls", fields: [userId], references: [id])
//   userId      String?       @unique
// }

// model UrlAnalytic {
//   id      String @id @default(uuid())
//   url     Url    @relation(fields: [url_id], references: [id])
//   url_id  String @unique
//   clicked Int
// }

// const user = await prisma.user.findUnique({
//   where: {
//     id: 'USER_ID',
//   },
//   include: {
//     userUrls: true,
//   },
// })

// console.log(user.userUrls)


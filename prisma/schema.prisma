// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  USER
  DEMO
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  role     UserRole  @default(USER)
  accounts Account[]
  sessions Session[]

  tags       Tag[]
  shortLinks ShortLink[]
  apiKeys    ApiKey[]

  subscriptions Subscription[]
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  EXPIRED
  TRIALING
}

model Subscription {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId Int
  plan   Plan   @relation(fields: [planId], references: [id])

  status             SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime?

  cancelAtPeriodEnd Boolean   @default(false)
  canceledAt        DateTime?
  endedAt           DateTime?
  trialStart        DateTime?
  trialEnd          DateTime?

  stripeSubscriptionId String? @unique
  stripeCustomerId     String?
  stripePriceId        String?
  stripePaymentStatus  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([planId])
  @@index([status])
}

enum PlanType {
  FREE
  PREMIUM
}

model Plan {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  type        PlanType
  description String?
  maxLinks    Int?
  maxUtmSets  Int?
  price       Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscriptions Subscription[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ApiKey {
  id        String    @id @default(uuid())
  userId    String
  name      String
  key       String    @unique
  createdAt DateTime  @default(now())
  lastUsed  DateTime?
  expiresAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UTMParam {
  id       String  @id @default(cuid())
  source   String?
  medium   String?
  campaign String
  term     String?
  content  String?

  shortLinkId String
  shortLink   ShortLink @relation(fields: [shortLinkId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([shortLinkId])
}

model ShortLink {
  id          String       @id @default(uuid())
  originalUrl String
  shortCode   String       @unique
  expiresAt   DateTime?
  password    String?
  userId      String?
  user        User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  qrCodeUrl   String?
  clicks      Int          @default(0)
  clickEvents ClickEvent[]
  linkTags    LinkTag[]
  utmParams   UTMParam[]
  description String?
  createdAt   DateTime     @default(now())
}

model ClickEvent {
  id          String   @id @default(uuid())
  shortLinkId String
  timestamp   DateTime @default(now())
  ipAddress   String?
  userAgent   String?
  referrer    String?
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  utmTerm     String?
  utmContent  String?
  country     String?
  city        String?
  device      String?
  browser     String?
  os          String?

  shortLink ShortLink @relation(fields: [shortLinkId], references: [id], onDelete: Cascade)
}

model Tag {
  id     String @id @default(uuid())
  name   String
  userId String

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  linkTags LinkTag[]

  @@unique([userId, name])
}

model LinkTag {
  linkId String
  tagId  String

  link ShortLink @relation(fields: [linkId], references: [id], onDelete: Cascade)
  tag  Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([linkId, tagId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@unique([token])
}

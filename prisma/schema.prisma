// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  urls          Url[]     @relation("UserUrls")
  role          String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Url {
  id           String         @id @default(uuid())
  originalUrl  String
  shortUrl     String
  urlCode      String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  UrlAnalytics UrlAnalytics[]
  user         User?          @relation("UserUrls", fields: [userId], references: [id])
  userId       String?        @unique
}

model UrlAnalytics {
  id     String @id @default(uuid())
  url    Url    @relation(fields: [url_id], references: [id])
  url_id String @unique
  clicks Int
}

// model User {
//   id          String        @id @default(uuid())
//   email       String        @unique
//   userUrls    Url[]         @relation("UserUrls")
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
// }

// model Url {
//   id          String        @id @default(uuid())
//   originalUrl String
//   shortUrl    String
//   urlCode     String        @unique
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
//   UrlAnalytics UrlAnalytics[]
//   user        User?         @relation("UserUrls", fields: [userId], references: [id])
//   userId      String?       @unique
// }

// model UrlAnalytics {
//   id      String @id @default(uuid())
//   url     Url    @relation(fields: [url_id], references: [id])
//   url_id  String @unique
//   clicked Int
// }

// const user = await prisma.user.findUnique({
//   where: {
//     id: 'USER_ID',
//   },
//   include: {
//     userUrls: true,
//   },
// })

// console.log(user.userUrls)

import { PasswordProtection } from "@/components/shortCode/password-protection";
import { recordClick } from "@/lib/actions/short-links";
import { shortLinksRepository } from "@/lib/db/repositories";
import { parseUserAgentImproved } from "@/lib/helpers";
import { Metadata } from "next";
import { headers } from "next/headers";
import { notFound, redirect } from "next/navigation";

interface GenerateMetadataProps {
  params: Promise<{ shortCode: string }>;
}

export async function generateMetadata({
  params,
}: GenerateMetadataProps): Promise<Metadata> {
  const { shortCode } = await params;

  if (["ggl", "ghub", "lkdn", "demo", "blog"].includes(shortCode)) {
    const demoTitles: Record<string, string> = {
      ggl: "Google",
      ghub: "GitHub",
      lkdn: "LinkedIn",
      demo: "Example Domain",
      blog: "Medium",
    };
    const demoUrlsMap: Record<string, string> = {
      ggl: "https://google.com",
      ghub: "https://github.com",
      lkdn: "https://linkedin.com",
      demo: "https://example.com",
      blog: "https://medium.com",
    };
    return {
      title: `Redirecting to ${demoTitles[shortCode]}...`,
      robots: { index: false, follow: true },
      openGraph: {
        title: demoTitles[shortCode],
        url: demoUrlsMap[shortCode],
        description: `Link to ${demoTitles[shortCode]}`,
        type: "website",
      },
    };
  }

  const shortLink = await shortLinksRepository.findByShortCode(shortCode);

  if (!shortLink || (shortLink.expiresAt && shortLink.expiresAt < new Date())) {
    return {
      title: "Link Not Found - Snipper",
      description: "This short link could not be found or has expired.",
      robots: { index: false, follow: false },
    };
  }

  const microlinkParams = new URLSearchParams({
    url: shortLink.originalUrl,
    screenshot: "true",
    meta: "false",
    embed: "screenshot.url",
    colorScheme: "light",
    "viewport.isMobile": "false",
    "viewport.deviceScaleFactor": "1",
    "viewport.width": "1200",
    "viewport.height": "630",
    ttl: "86400", // 1 day
  });
  const ogImageUrl = `https://api.microlink.io/?${microlinkParams.toString()}`;

  const pageTitle = `Redirecting to ${shortLink.originalUrl}...`;
  const pageDescription = `You are being redirected via Snipper.`;

  const ogTitle = `Link to ${shortLink.originalUrl}`;
  const ogDescription = `Short link generated by Snipper leading to ${shortLink.originalUrl}`;

  return {
    title: pageTitle,
    description: pageDescription,
    robots: {
      index: false,
      follow: true,
    },
    openGraph: {
      title: ogTitle,
      description: ogDescription,
      url: shortLink.originalUrl,
      type: "website",
      images: [
        {
          url: ogImageUrl,
          width: 1200,
          height: 630,
          alt: `Preview of ${shortLink.originalUrl}`,
        },
      ],
      siteName: "Snipper",
    },
    twitter: {
      card: "summary_large_image",
      title: ogTitle,
      description: ogDescription,
      images: [ogImageUrl],
    },
  };
}

interface ShortCodePageProps {
  params: Promise<{
    shortCode: string;
  }>;
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>;
}

export default async function ShortCodePage({
  params,
  searchParams,
}: ShortCodePageProps) {
  const { shortCode } = await params;
  const resolvedSearchParams = await searchParams;

  if (["ggl", "ghub", "lkdn", "demo", "blog"].includes(shortCode)) {
    const demoUrlsMap: Record<string, string> = {
      ggl: "https://google.com",
      ghub: "https://github.com",
      lkdn: "https://linkedin.com",
      demo: "https://example.com",
      blog: "https://medium.com",
    };

    redirect(demoUrlsMap[shortCode]);
  }

  const shortLink = await shortLinksRepository.findByShortCode(shortCode);

  if (!shortLink || (shortLink.expiresAt && shortLink.expiresAt < new Date())) {
    notFound();
  }

  if (shortLink.password) {
    return <PasswordProtection {...{ shortCode, resolvedSearchParams }} />;
  }

  const headersList = await headers();
  const userAgent = headersList.get("user-agent") || "";
  const referrer = headersList.get("referer") || "";

  const xForwardedFor = headersList.get("x-forwarded-for");
  const ip = xForwardedFor ? xForwardedFor.split(",")[0].trim() : "127.0.0.1";

  const rawCountry = headersList.get("x-vercel-ip-country");
  const rawCity = headersList.get("x-vercel-ip-city");

  let country = "Unknown",
    city = "Unknown";

  if (rawCountry) {
    try {
      country = decodeURIComponent(rawCountry);
    } catch (e) {
      country = rawCountry;
    }
  } else {
    try {
      const realIP = await fetch("https://api.ipify.org/?format=json")
        .then((res) => res.json())
        .then((res) => res?.ip);
      const res = await fetch(`http://ip-api.com/json/${realIP}`)
        .then((res) => res.json())
        .then((res) => res);
      country = res?.countryCode ?? "Unknown";
    } catch (e) {
      country = "Unknown";
    }
  }
  if (rawCity) {
    try {
      city = decodeURIComponent(rawCity);
    } catch (e) {
      city = rawCity;
    }
  } else {
    try {
      const realIP = await fetch("https://api.ipify.org/?format=json")
        .then((res) => res.json())
        .then((res) => res?.ip);
      const res = await fetch(`http://ip-api.com/json/${realIP}`)
        .then((res) => res.json())
        .then((res) => res);
      city = decodeURIComponent(res?.city ?? "Unknown");
    } catch (e) {
      city = "Unknown";
    }
  }

  const { browser, os, device } = parseUserAgentImproved(userAgent);

  const getQueryParam = (key: string): string | undefined => {
    const value = resolvedSearchParams[key];
    return Array.isArray(value) ? value[0] : value;
  };

  const utmSource = getQueryParam("utm_source");
  const utmMedium = getQueryParam("utm_medium");
  const utmCampaign = getQueryParam("utm_campaign");
  const utmTerm = getQueryParam("utm_term");
  const utmContent = getQueryParam("utm_content");

  recordClick(shortCode, {
    ipAddress: ip,
    userAgent,
    referrer,
    device,
    browser,
    os,
    country,
    city,
    utmSource,
    utmMedium,
    utmCampaign,
    utmTerm,
    utmContent,
  }).catch(console.error);

  redirect(shortLink.originalUrl);
}

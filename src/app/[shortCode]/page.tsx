import { Metadata } from "next";
import { headers } from "next/headers";
import { notFound, redirect } from "next/navigation";
import { publicUrl } from "@/env.mjs";

import { processShortLink } from "@/lib/actions/short-links";
import { appName } from "@/lib/constants";
import {
  customDomainsRepository,
  shortLinksRepository,
} from "@/lib/db/repositories";
import { extractSubdomainFromHost } from "@/lib/helpers";
import { PasswordProtection } from "@/components/shortCode/password-protection";

interface GenerateMetadataProps {
  params: Promise<{ shortCode: string }>;
}

export async function generateMetadata({
  params,
}: GenerateMetadataProps): Promise<Metadata> {
  const { shortCode } = await params;

  if (["ggl", "ghub", "lkdn", "demo", "blog"].includes(shortCode)) {
    const demoTitles: Record<string, string> = {
      ggl: "Google",
      ghub: "GitHub",
      lkdn: "LinkedIn",
      demo: "Example Domain",
      blog: "Medium",
    };
    const demoUrlsMap: Record<string, string> = {
      ggl: "https://google.com",
      ghub: "https://github.com",
      lkdn: "https://linkedin.com",
      demo: "https://example.com",
      blog: "https://medium.com",
    };
    return {
      title: `Redirecting to ${demoTitles[shortCode]}...`,
      robots: { index: false, follow: true },
      openGraph: {
        title: demoTitles[shortCode],
        url: demoUrlsMap[shortCode],
        description: `Link to ${demoTitles[shortCode]}`,
        type: "website",
      },
    };
  }

  const shortLink = await shortLinksRepository.findByShortCode(shortCode);

  if (!shortLink || (shortLink.expiresAt && shortLink.expiresAt < new Date())) {
    return {
      title: `Link Not Found - ${appName}`,
      description: "This short link could not be found or has expired.",
      robots: { index: false, follow: false },
    };
  }

  const pageTitle = `Redirecting to ${shortLink.originalUrl}...`;
  const pageDescription = `You are being redirected via ${appName}.`;

  const ogTitle = shortLink.customOgTitle || `Link to ${shortLink.originalUrl}`;
  const ogDescription =
    shortLink.customOgDescription ||
    `Short link generated by ${appName} leading to ${shortLink.originalUrl}`;

  let ogImageUrl: string | undefined = undefined;
  let ogImageWidth = 1200; // Default OG width
  let ogImageHeight = 630; // Default OG height
  let ogImageAlt = `Preview of ${shortLink.originalUrl}`;

  if (shortLink.customOgImageUrl) {
    ogImageUrl = shortLink.customOgImageUrl;
    // ogImageWidth = shortLink.customOgImageWidth || 1200;
    // ogImageHeight = shortLink.customOgImageHeight || 630;
    ogImageAlt = ogDescription;
  } else {
    const microlinkParams = new URLSearchParams({
      url: shortLink.originalUrl,
      screenshot: "true",
      meta: "false",
      embed: "screenshot.url",
      colorScheme: "light",
      "viewport.isMobile": "false",
      "viewport.deviceScaleFactor": "1",
    });
    ogImageUrl = `https://api.microlink.io/?${microlinkParams.toString()}`;
    ogImageWidth = 1200;
    ogImageHeight = 630;
  }

  return {
    title: pageTitle,
    description: pageDescription,
    robots: {
      index: false,
      follow: true,
    },
    openGraph: {
      title: ogTitle,
      description: ogDescription,
      url: shortLink.originalUrl,
      type: "website",
      images: ogImageUrl
        ? [
            {
              url: ogImageUrl,
              width: ogImageWidth,
              height: ogImageHeight,
              alt: ogImageAlt,
            },
          ]
        : undefined,
      siteName: appName,
    },
    twitter: {
      card: ogImageUrl ? "summary_large_image" : "summary",
      title: ogTitle,
      description: ogDescription,
      images: ogImageUrl ? [ogImageUrl] : undefined,
    },
  };
}

interface ShortCodePageProps {
  params: Promise<{
    shortCode: string;
  }>;
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>;
}

export default async function ShortCodePage({
  params,
  searchParams,
}: ShortCodePageProps) {
  const { shortCode } = await params;
  const resolvedSearchParams = await searchParams;
  const resolvedHeaders = await headers();
  const host = resolvedHeaders.get("host") || "";
  const subdomain = extractSubdomainFromHost(host);

  if (["ggl", "ghub", "lkdn", "demo", "blog"].includes(shortCode)) {
    if (subdomain) redirect(publicUrl);

    const demoUrlsMap: Record<string, string> = {
      ggl: "https://google.com",
      ghub: "https://github.com",
      lkdn: "https://linkedin.com",
      demo: "https://example.com",
      blog: "https://medium.com",
    };

    redirect(demoUrlsMap[shortCode]);
  }

  let shortLink;

  if (subdomain) {
    const customDomain = await customDomainsRepository.findByDomainAndShortCode(
      subdomain,
      shortCode,
    );

    if (!customDomain) notFound();

    shortLink = customDomain.shortLinks[0];
  } else {
    shortLink = await shortLinksRepository.findByShortCode(shortCode);
    if (!!shortLink?.customDomainId) return notFound();
  }

  if (!shortLink || (shortLink.expiresAt && shortLink.expiresAt < new Date())) {
    notFound();
  }

  if (shortLink.password) {
    return <PasswordProtection {...{ shortCode, resolvedSearchParams }} />;
  }

  await processShortLink({ shortCode, resolvedSearchParams });

  redirect(shortLink.originalUrl);
}
